### Type definitions saved at 2025-01-12T10:25:40.413Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  graphqlTypegen: SiteGraphqlTypegen
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
}

type SiteSiteMetadata {
  title: String
  description: String
  siteUrl: String
}

type SiteGraphqlTypegen {
  generateOnBuild: Boolean
  typesOutputPath: String
  documentSearchPaths: [String]
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

interface ContentfulEntry implements Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

enum ImageResizingBehavior {
  NO_CHANGE

  """
  Same as the default resizing, but adds padding so that the generated image has the specified dimensions.
  """
  PAD

  """Crop a part of the original image to match the specified size."""
  CROP

  """
  Crop the image to the specified dimensions, if the original image is smaller
  than these dimensions, then the image will be upscaled.
  """
  FILL

  """
  When used in association with the f parameter below, creates a thumbnail from the image based on a focus area.
  """
  THUMB

  """Scale the image regardless of the original aspect ratio."""
  SCALE
}

enum ContentfulImageCropFocus {
  TOP
  TOP_LEFT
  TOP_RIGHT
  BOTTOM
  BOTTOM_RIGHT
  BOTTOM_LEFT
  RIGHT
  LEFT
  FACE
  FACES
  CENTER
}

type ContentfulAsset implements ContentfulReference & Node & RemoteFile @dontInfer {
  contentful_id: String!
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI.
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: GatsbyImagePlaceholder

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1,
    2] for fluid. In this case, an image with a fluid layout and width = 400
    would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    jpegProgressive: Boolean = true
    resizingBehavior: ImageResizingBehavior
    cropFocus: ContentfulImageCropFocus

    """
    Desired corner radius in pixels. Results in an image with rounded corners.
    Pass `-1` for a full circle/ellipse.
    """
    cornerRadius: Int
    quality: Int = 50
  ): GatsbyImageData!
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
  sys: ContentfulAssetSys
  url: String
  placeholderUrl: String
  mimeType: String
  filename: String
  width: Int
  height: Int
  size: Int
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

type ContentfulAssetFile {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulAssetSys {
  type: String
  revision: Int
}

type ContentfulElement implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  name: String
  body: ContentfulElementBody
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulElementSys
}

type ContentfulElementBody {
  raw: String
  references: [ContentfulComponent] @link(by: "id", from: "references___NODE")
}

type ContentfulComponent implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  name: String
  moduleName: String
  props: contentfulComponentPropsJsonNode @link(by: "id", from: "props___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulComponentSys
  body: ContentfulComponentBody
}

type contentfulComponentPropsJsonNode implements Node @childOf(mimeTypes: [], types: ["ContentfulComponent"]) @dontInfer {
  target: String
  sys: contentfulComponentPropsJsonNodeSys
  as: String
  className: String
  tagName: String
  loop: Boolean
  speed: Int
  autoplay: contentfulComponentPropsJsonNodeAutoplay
  navigation: contentfulComponentPropsJsonNodeNavigation
  breakpoints: contentfulComponentPropsJsonNodeBreakpoints
  spaceBetween: Int
  slidesPerView: Int
  sort: contentfulComponentPropsJsonNodeSort
  limit: Int
  filter: contentfulComponentPropsJsonNodeFilter
}

type contentfulComponentPropsJsonNodeSys {
  type: String
}

type contentfulComponentPropsJsonNodeAutoplay {
  delay: Int
}

type contentfulComponentPropsJsonNodeNavigation {
  nextEl: String
  prevEl: String
}

type contentfulComponentPropsJsonNodeBreakpoints {
  _768: contentfulComponentPropsJsonNodeBreakpoints_768 @proxy(from: "768", fromNode: false)
}

type contentfulComponentPropsJsonNodeBreakpoints_768 {
  slidesPerView: Int
}

type contentfulComponentPropsJsonNodeSort {
  field: String
  order: String
}

type contentfulComponentPropsJsonNodeFilter {
  type: String
  category: String
}

type ContentfulComponentSys {
  type: String
  revision: Int
  contentType: ContentfulComponentSysContentType
}

type ContentfulComponentSysContentType {
  sys: ContentfulComponentSysContentTypeSys
}

type ContentfulComponentSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulComponentBody {
  raw: String
  references: [ContentfulComponent] @link(by: "id", from: "references___NODE")
}

type ContentfulElementSys {
  type: String
  revision: Int
  contentType: ContentfulElementSysContentType
}

type ContentfulElementSysContentType {
  sys: ContentfulElementSysContentTypeSys
}

type ContentfulElementSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulImage implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  name: String
  moduleName: String
  body: ContentfulAsset @link(by: "id", from: "body___NODE")
  article: [ContentfulArticle] @link(by: "id", from: "article___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulImageSys
  props: contentfulImagePropsJsonNode @link(by: "id", from: "props___NODE")
}

type ContentfulArticle implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  slug: String
  title: String
  publishDate: Date @dateformat
  type: ContentfulArticleType @link(by: "id", from: "type___NODE")
  category: ContentfulArticleCategory @link(by: "id", from: "category___NODE")
  body: contentfulArticleBodyTextNode @link(by: "id", from: "body___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulArticleSys
  thumbnail: ContentfulImage @link(by: "id", from: "thumbnail___NODE")
}

type ContentfulArticleType implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  slug: String
  name: String
  article: [ContentfulArticle] @link(by: "id", from: "article___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulArticleTypeSys
}

type ContentfulArticleTypeSys {
  type: String
  revision: Int
  contentType: ContentfulArticleTypeSysContentType
}

type ContentfulArticleTypeSysContentType {
  sys: ContentfulArticleTypeSysContentTypeSys
}

type ContentfulArticleTypeSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulArticleCategory implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  slug: String
  name: String
  order: Int
  article: [ContentfulArticle] @link(by: "id", from: "article___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulArticleCategorySys
}

type ContentfulArticleCategorySys {
  type: String
  revision: Int
  contentType: ContentfulArticleCategorySysContentType
}

type ContentfulArticleCategorySysContentType {
  sys: ContentfulArticleCategorySysContentTypeSys
}

type ContentfulArticleCategorySysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type contentfulArticleBodyTextNode implements Node @childOf(mimeTypes: [], types: ["ContentfulArticle"]) @dontInfer {
  body: String
  sys: contentfulArticleBodyTextNodeSys
}

type contentfulArticleBodyTextNodeSys {
  type: String
}

type ContentfulArticleSys {
  type: String
  revision: Int
  contentType: ContentfulArticleSysContentType
}

type ContentfulArticleSysContentType {
  sys: ContentfulArticleSysContentTypeSys
}

type ContentfulArticleSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulImageSys {
  type: String
  revision: Int
  contentType: ContentfulImageSysContentType
}

type ContentfulImageSysContentType {
  sys: ContentfulImageSysContentTypeSys
}

type ContentfulImageSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type contentfulImagePropsJsonNode implements Node @childOf(mimeTypes: [], types: ["ContentfulImage"]) @dontInfer {
  height: Int
  sys: contentfulImagePropsJsonNodeSys
  width: Int
}

type contentfulImagePropsJsonNodeSys {
  type: String
}

type ContentfulTemplate implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  name: String
  body: ContentfulTemplateBody
  script: ContentfulTemplateScript
  context: contentfulTemplateContextJsonNode @link(by: "id", from: "context___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulTemplateSys
  head: ContentfulTemplateHead
}

type ContentfulTemplateBody {
  raw: String
  references: [ContentfulComponent] @link(by: "id", from: "references___NODE")
}

type ContentfulTemplateScript {
  raw: String
}

type contentfulTemplateContextJsonNode implements Node @childOf(mimeTypes: [], types: ["ContentfulTemplate"]) @dontInfer {
  sys: contentfulTemplateContextJsonNodeSys
}

type contentfulTemplateContextJsonNodeSys {
  type: String
}

type ContentfulTemplateSys {
  type: String
  revision: Int
  contentType: ContentfulTemplateSysContentType
}

type ContentfulTemplateSysContentType {
  sys: ContentfulTemplateSysContentTypeSys
}

type ContentfulTemplateSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulTemplateHead {
  raw: String
}

type ContentfulPage implements ContentfulReference & ContentfulEntry & Node @dontInfer {
  contentful_id: String!
  node_locale: String!
  pagePath: String
  head: ContentfulPageHead
  body: ContentfulPageBody
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPageSys
  context: contentfulPageContextJsonNode @link(by: "id", from: "context___NODE")
  script: ContentfulPageScript
}

type ContentfulPageHead {
  raw: String
}

type ContentfulPageBody {
  raw: String
  references: [ContentfulComponentContentfulElementContentfulImageUnion] @link(by: "id", from: "references___NODE")
}

union ContentfulComponentContentfulElementContentfulImageUnion = ContentfulComponent | ContentfulElement | ContentfulImage

type ContentfulPageSys {
  type: String
  revision: Int
  contentType: ContentfulPageSysContentType
}

type ContentfulPageSysContentType {
  sys: ContentfulPageSysContentTypeSys
}

type ContentfulPageSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type contentfulPageContextJsonNode implements Node @childOf(mimeTypes: [], types: ["ContentfulPage"]) @dontInfer {
  sys: contentfulPageContextJsonNodeSys
}

type contentfulPageContextJsonNodeSys {
  type: String
}

type ContentfulPageScript {
  raw: String
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["contentfulArticleBodyTextNode"]) @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type MarkdownRemarkFrontmatter {
  title: String
}

type ContentfulContentType implements Node @dontInfer {
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeSys {
  type: String
}